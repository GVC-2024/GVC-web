[{"C:\\Users\\PC\\OneDrive\\바탕 화면\\GVC-web\\gvc\\client\\src\\index.js":"1","C:\\Users\\PC\\OneDrive\\바탕 화면\\GVC-web\\gvc\\client\\src\\App.js":"2","C:\\Users\\PC\\OneDrive\\바탕 화면\\GVC-web\\gvc\\client\\src\\pages\\MeetingSummary.js":"3","C:\\Users\\PC\\OneDrive\\바탕 화면\\GVC-web\\gvc\\client\\src\\pages\\SignUp.js":"4","C:\\Users\\PC\\OneDrive\\바탕 화면\\GVC-web\\gvc\\client\\src\\pages\\HomePage.js":"5","C:\\Users\\PC\\OneDrive\\바탕 화면\\GVC-web\\gvc\\client\\src\\pages\\MyConference.js":"6","C:\\Users\\PC\\OneDrive\\바탕 화면\\GVC-web\\gvc\\client\\src\\pages\\MyPageCorrection.js":"7","C:\\Users\\PC\\OneDrive\\바탕 화면\\GVC-web\\gvc\\client\\src\\pages\\LoginPage.js":"8","C:\\Users\\PC\\OneDrive\\바탕 화면\\GVC-web\\gvc\\client\\src\\pages\\MyPage.js":"9","C:\\Users\\PC\\OneDrive\\바탕 화면\\GVC-web\\gvc\\client\\src\\pages\\AISummary.js":"10","C:\\Users\\PC\\OneDrive\\바탕 화면\\GVC-web\\gvc\\client\\src\\pages\\Header.jsx":"11","C:\\Users\\PC\\OneDrive\\바탕 화면\\GVC-web\\gvc\\client\\src\\pages\\LoginSearch\\LoginSearchPage.js":"12","C:\\Users\\PC\\OneDrive\\바탕 화면\\GVC-web\\gvc\\client\\src\\pages\\GlobalStyle.js":"13","C:\\Users\\PC\\OneDrive\\바탕 화면\\GVC-web\\gvc\\client\\src\\pages\\axiosInstance.js":"14"},{"size":394,"mtime":1722163309073,"results":"15","hashOfConfig":"16"},{"size":1463,"mtime":1722221224412,"results":"17","hashOfConfig":"16"},{"size":3734,"mtime":1721374394848,"results":"18","hashOfConfig":"16"},{"size":13171,"mtime":1722218963054,"results":"19","hashOfConfig":"16"},{"size":3902,"mtime":1722218637337,"results":"20","hashOfConfig":"16"},{"size":3037,"mtime":1722162702998,"results":"21","hashOfConfig":"16"},{"size":1867,"mtime":1721374394861,"results":"22","hashOfConfig":"16"},{"size":5930,"mtime":1722265653959,"results":"23","hashOfConfig":"16"},{"size":2490,"mtime":1721374394858,"results":"24","hashOfConfig":"16"},{"size":3412,"mtime":1721374394832,"results":"25","hashOfConfig":"16"},{"size":3628,"mtime":1722331150058,"results":"26","hashOfConfig":"16"},{"size":13221,"mtime":1721374394847,"results":"27","hashOfConfig":"16"},{"size":1754,"mtime":1722218461834,"results":"28","hashOfConfig":"16"},{"size":445,"mtime":1722220228029,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"v606wi",{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"33"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"33"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"33"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"33"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"33"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"33"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\PC\\OneDrive\\바탕 화면\\GVC-web\\gvc\\client\\src\\index.js",[],[],[],"C:\\Users\\PC\\OneDrive\\바탕 화면\\GVC-web\\gvc\\client\\src\\App.js",[],[],"C:\\Users\\PC\\OneDrive\\바탕 화면\\GVC-web\\gvc\\client\\src\\pages\\MeetingSummary.js",[],[],"C:\\Users\\PC\\OneDrive\\바탕 화면\\GVC-web\\gvc\\client\\src\\pages\\SignUp.js",["79","80","81"],[],"import React, { useState, useRef } from 'react'; \r\nimport styled from 'styled-components'; \r\nimport axios from 'axios'; // axios 임포트 (HTTP 요청을 위해)\r\nimport { useNavigate } from \"react-router-dom\"; \r\n\r\n// Container 스타일 정의 (화면 전체를 flex로 나누기)\r\nconst Container = styled.div`\r\n    display: flex; // 좌우로 컨테이너를 나눔\r\n    height: 100vh; // 전체 화면 높이\r\n`;\r\n\r\n// RightContainer 스타일 정의 (오른쪽 컨테이너)\r\nconst RightContainer = styled.div`\r\n    flex: 1; // flex 비율 1\r\n    display: flex; // flex 사용\r\n    flex-direction: column; // 세로 방향 정렬\r\n    justify-content: center; // 수직 중앙 정렬\r\n    align-items: center; // 수평 중앙 정렬\r\n    padding: 50px; // 내부 여백\r\n    background-color: white; // 배경색 설정\r\n    margin-bottom: 200px;\r\n`;\r\n\r\n// FormTitle 스타일 정의 (폼 제목)\r\nconst FormTitle = styled.h1`\r\n\r\n    margin-bottom: 20px; // 아래 여백\r\n    font-size: 40px; // 폰트 크기\r\n    text-align: center; // 텍스트 중앙 정렬\r\n    margin-left: 20px;\r\n`;\r\n\r\n// Subtitle 스타일 정의 (부제목)\r\nconst Subtitle = styled.p`\r\n    margin-bottom: 30px; // 아래 여백\r\n    font-size: 20px; // 폰트 크기\r\n    color: #555; // 폰트 색상\r\n    text-align: center; // 텍스트 중앙 정렬\r\n    margin-left: 30px;\r\n`;\r\n\r\n// InputGroup 스타일 정의 (입력 그룹)\r\nconst InputGroup = styled.div`\r\n    margin-bottom: 15px; // 아래 여백\r\n    width: 120%; // 너비 설정\r\n    display: flex; // flex 사용\r\n    flex-direction: column; // 세로 방향 정렬\r\n    align-items: center; // 수평 중앙 정렬\r\n`;\r\n\r\n// Input 스타일 정의 (입력 필드)\r\nconst Input = styled.input`\r\n    width: 150%; // 너비 설정\r\n    padding: 10px; // 내부 여백\r\n    font-size: 19px; // 폰트 크기\r\n    border: 1px solid #ddd; // 테두리 설정\r\n    border-radius: 20px; // 둥근 모서리\r\n    text-align: center; // 텍스트 중앙 정렬\r\n`;\r\n\r\n// ErrorMessage 스타일 정의 (에러 메시지)\r\nconst ErrorMessage = styled.div`\r\n    color: red; // 글자 색상\r\n    font-size: 11px; // 폰트 크기\r\n    margin-top: 5px; // 위쪽 여백\r\n`;\r\n\r\n// Button 스타일 정의 (버튼)\r\nconst Button = styled.button`\r\n    width: auto; // 너비 설정\r\n    font-size: 25px; // 폰트 크기\r\n    margin-left: 90px;\r\n    background: none;\r\n    color: #2969F3; \r\n    border: none; // 테두리 없음\r\n    cursor: pointer; // 마우스 커서 모양\r\n    margin-top: 20px; // 위쪽 여백\r\n    font-weight: bold;\r\n`;\r\n\r\n\r\n// SignUp 컴포넌트 정의\r\nconst SignUp = () => {\r\n    const navigate = useNavigate(); \r\n    const [userDetails, setUserDetails] = useState({\r\n        username: '', \r\n        password: '', \r\n        confirmPassword: '', \r\n        name: '', \r\n        email: '', \r\n        phoneNumber: '', \r\n        birthDate: '' \r\n    });\r\n\r\n    const [passwordMatch, setPasswordMatch] = useState(true); // 비밀번호 일치 여부 상태\r\n    const [passwordValid, setPasswordValid] = useState(true); // 비밀번호 유효성 상태\r\n    const [usernameValid, setUsernameValid] = useState(true); // 아이디 유효성 상태\r\n    const [showPhoneWarning, setShowPhoneWarning] = useState(false); // 전화번호 경고 표시 상태\r\n    const [formError, setFormError] = useState(false); // 폼 에러 상태\r\n    const [usernameStatus, setUsernameStatus] = useState(null); // 아이디 상태\r\n    const [emailStatus, setEmailStatus] = useState(null); // 이메일 상태\r\n    const [phoneStatus, setPhoneStatus] = useState(null); // 전화번호 상태\r\n    const usernameRef = useRef(null); // 아이디 입력 필드 참조\r\n\r\n    // 폼 유효성 검사 함수\r\n    const validateForm = () => {\r\n        return userDetails.username && userDetails.password && userDetails.confirmPassword && passwordMatch && passwordValid && !showPhoneWarning && usernameStatus === 'available' && emailStatus === 'available' && phoneStatus === 'available';\r\n    };\r\n\r\n    // 폼 제출 핸들러\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault(); // 기본 동작 방지\r\n        if (validateForm()) { // 폼이 유효한 경우\r\n            try {\r\n                const response = await axios.post('http://localhost:5000/api/auth/register', {\r\n                    uid: userDetails.username, // 아이디\r\n                    uname: userDetails.name, // 이름\r\n                    uemail: userDetails.email, // 이메일\r\n                    upassword: userDetails.password, // 비밀번호\r\n                    utel: userDetails.phoneNumber, // 전화번호\r\n                    ubirth: userDetails.birthDate, // 생년월일\r\n                });\r\n                console.log('User registered:', response.data); // 성공 시 응답 데이터 출력\r\n                setFormError(false); // 폼 에러 상태 초기화\r\n                navigate('/'); // 홈 페이지로 이동\r\n            } catch (error) { // 오류 발생 시\r\n                console.error('Error registering user:', error); // 오류 출력\r\n                if (error.response) {\r\n                    console.error('Server response:', error.response.data); // 서버 응답 출력\r\n                }\r\n                setFormError(true); // 폼 에러 상태 설정\r\n            }\r\n        } else {\r\n            setFormError(true); // 폼이 유효하지 않은 경우\r\n        }\r\n    };\r\n    \r\n\r\n    // 입력 필드 변경 핸들러\r\n    const handleInputChange = async (e) => {\r\n        const { name, value } = e.target; // 입력 필드의 이름과 값\r\n        setUserDetails(prev => ({ ...prev, [name]: value })); // 상태 업데이트\r\n\r\n        if (name === 'password') { // 비밀번호 필드인 경우\r\n            const passwordRegex = /^(?=.*[a-zA-Z])(?=.*[0-9]).{6,}$/; // 비밀번호 정규식\r\n            setPasswordValid(passwordRegex.test(value)); // 비밀번호 유효성 검사\r\n            setPasswordMatch(value === userDetails.confirmPassword); // 비밀번호 일치 여부 검사\r\n        }\r\n\r\n        if (name === 'confirmPassword') { // 비밀번호 확인 필드인 경우\r\n            setPasswordMatch(value === userDetails.password); // 비밀번호 일치 여부 검사\r\n        }\r\n\r\n        if (name === 'username') { // 아이디 필드인 경우\r\n            const usernameRegex = /^[a-zA-Z0-9]{4,}$/; // 아이디 정규식\r\n            setUsernameValid(usernameRegex.test(value)); // 아이디 유효성 검사\r\n\r\n            setUsernameStatus(null); // 아이디 상태 초기화\r\n            if(usernameRegex.test(value)){ //아이디가 4자리 이상인 경우 중복 체크 \r\n\r\n                try {\r\n                    const response = await axios.post('http://localhost:5000/api/auth/check-username', { uid: value }); // 아이디 중복 체크\r\n                    setUsernameStatus('available'); // 아이디 사용 가능 상태\r\n                } catch (error) {\r\n                    if (error.response && error.response.status === 409) { // 아이디 중복인 경우\r\n                        setUsernameStatus('unavailable'); // 아이디 사용 불가 상태\r\n                    } else {\r\n                        console.error('Error checking username:', error); // 오류 출력\r\n                    }\r\n                }\r\n            }\r\n        }\r\n           \r\n\r\n        if (name === 'email') { // 이메일 필드인 경우\r\n            setEmailStatus(null); // 이메일 상태 초기화\r\n            try {\r\n                const response = await axios.post('http://localhost:5000/api/auth/check-email', { uemail: value }); // 이메일 중복 체크\r\n                setEmailStatus('available'); // 이메일 사용 가능 상태\r\n            } catch (error) {\r\n                if (error.response && error.response.status === 409) { // 이메일 중복인 경우\r\n                    setEmailStatus('unavailable'); // 이메일 사용 불가 상태\r\n                } else {\r\n                    console.error('Error checking email:', error); // 오류 출력\r\n                }\r\n            }\r\n        }\r\n\r\n        if (name === 'phoneNumber') { // 전화번호 필드인 경우\r\n            setPhoneStatus(null); // 전화번호 상태 초기화\r\n            if (/^[0-9]*$/.test(value) || value === '') { // 숫자인지 확인\r\n                setShowPhoneWarning(false); // 경고 표시 숨기기\r\n                try {\r\n                    const response = await axios.post('http://localhost:5000/api/auth/check-phoneNumber', { utel: value }); // 전화번호 중복 체크\r\n                    setPhoneStatus('available'); // 전화번호 사용 가능 상태\r\n                } catch (error) {\r\n                    if (error.response && error.response.status === 409) { // 전화번호 중복인 경우\r\n                        setPhoneStatus('unavailable'); // 전화번호 사용 불가 상태\r\n                    } else {\r\n                        console.error('Error checking phone number:', error); // 오류 출력\r\n                    }\r\n                }\r\n            } else {\r\n                setShowPhoneWarning(true); // 경고 표시\r\n            }\r\n        }\r\n    };\r\n\r\n    // JSX 반환\r\n    return (\r\n        <Container>\r\n           \r\n            <RightContainer>\r\n                <FormTitle>계정 생성</FormTitle>\r\n                <Subtitle>아래의 빈칸을 모두 입력해주세요.</Subtitle>\r\n                <form onSubmit={handleSubmit}>\r\n                    <InputGroup>\r\n                        <Input\r\n                            type=\"text\"\r\n                            name=\"username\"\r\n                            placeholder=\"아이디\"\r\n                            ref={usernameRef}\r\n                            onChange={handleInputChange}\r\n                            value={userDetails.username}\r\n                        />\r\n                        {!usernameValid && <ErrorMessage> 영문 또는 숫자를 포함하여 4자리 이상 입력해주세요.</ErrorMessage>}\r\n                        {usernameStatus === 'unavailable' && <ErrorMessage> 이미 존재하는 아이디입니다.</ErrorMessage>}\r\n                        {usernameStatus === 'available' && <ErrorMessage style={{color: 'green'}}>사용 가능한 아이디입니다.</ErrorMessage>}\r\n                    </InputGroup>\r\n                    <InputGroup>\r\n                        <Input type=\"password\" name=\"password\" placeholder=\"비밀번호\" onChange={handleInputChange} />\r\n                        {!passwordValid && <ErrorMessage> 영문과 숫자를 포함하여 6자리 이상으로 입력해주세요.</ErrorMessage>}\r\n                    </InputGroup>\r\n                    <InputGroup>\r\n                        <Input type=\"password\" name=\"confirmPassword\" placeholder=\"비밀번호 확인\" onChange={handleInputChange} />\r\n                        {!passwordMatch && <ErrorMessage> 비밀번호가 일치하지 않습니다</ErrorMessage>}\r\n                    </InputGroup>\r\n                    <InputGroup>\r\n                        <Input type=\"text\" name=\"name\" placeholder=\"이름\" onChange={handleInputChange} />\r\n                    </InputGroup>\r\n                    <InputGroup>\r\n                        <Input type=\"email\" name=\"email\" placeholder=\"이메일\" onChange={handleInputChange} />\r\n                        {emailStatus === 'unavailable' && <ErrorMessage> 이미 존재하는 이메일입니다.</ErrorMessage>}\r\n                        {emailStatus === 'available' && <ErrorMessage style={{color: 'green'}}> 이메일을 사용할 수 있습니다.</ErrorMessage>}\r\n                    </InputGroup>\r\n                    <InputGroup>\r\n                        <Input\r\n                            type=\"text\"\r\n                            id=\"phoneNumber\"\r\n                            name=\"phoneNumber\"\r\n                            placeholder=\"전화번호\"\r\n                            value={userDetails.phoneNumber}\r\n                            onChange={handleInputChange}\r\n                        />\r\n                        {showPhoneWarning && <ErrorMessage>숫자로 입력해주세요.</ErrorMessage>}\r\n                        {phoneStatus === 'unavailable' && <ErrorMessage>이미 가입된 전화번호입니다.</ErrorMessage>}\r\n                        {phoneStatus === 'available' && <ErrorMessage style={{ color: 'green' }}>전화번호를 사용할 수 있습니다.</ErrorMessage>}\r\n                    </InputGroup>\r\n                    <InputGroup>\r\n                        <Input\r\n                            type=\"text\"\r\n                            id=\"birthDate\"\r\n                            name=\"birthDate\"\r\n                            placeholder=\"YYYY-MM-DD 형식으로 입력해주세요.\"\r\n                            onChange={handleInputChange}\r\n                        />\r\n                    </InputGroup>\r\n                    {formError && <ErrorMessage>오류가 있습니다.</ErrorMessage>}\r\n                    <Button type=\"submit\">회원가입</Button>\r\n                </form>\r\n            </RightContainer>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default SignUp; \r\n","C:\\Users\\PC\\OneDrive\\바탕 화면\\GVC-web\\gvc\\client\\src\\pages\\HomePage.js",[],[],"C:\\Users\\PC\\OneDrive\\바탕 화면\\GVC-web\\gvc\\client\\src\\pages\\MyConference.js",["82"],[],"import React, { useState } from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport \"./MyConference.css\";\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction MyConference() {\r\n    const navigate = useNavigate();\r\n    // 회의 일정 데이터 예시\r\n    const initialMeetings = [\r\n        { id: 1, title: '2024년 4월 15일 회의', time: '10:00' },\r\n        { id: 2, title: '2024년 4월 16일 회의', time: '14:00' },\r\n    ];\r\n\r\n    const [meetings, setMeetings] = useState(initialMeetings);\r\n\r\n    // 예약, 수정, 공유편집, AI 요약 버튼 클릭 시 동작 함수들\r\n    const handleReserveClick = () => {\r\n        navigate('/reservation');\r\n    };\r\n\r\n    const handleEditClick = () => {\r\n        // 수정하기 버튼 클릭 시 동작\r\n        console.log('수정하기 버튼 클릭');\r\n    };\r\n\r\n    const onClickButtonMeetingSum = (id) => {\r\n     navigate(`/meeting-summary/${id}`);\r\n    };\r\n\r\n     const onClickButtonAISummary = (id) => {\r\n        navigate(`/ai-summary/${id}`);\r\n    };\r\n\r\n    return (\r\n        <div className=\"MyConference\">\r\n            <h1>나의 회의 일정</h1>\r\n\r\n            {/* 캘린더 섹션 */}\r\n            <div className=\"calendar-section\">\r\n                <div className=\"calendar\">\r\n                    <h3>캘린더</h3>\r\n                    <hr className=\"divider\" />\r\n                    <div className=\"calendar-body\">\r\n                        {/* 여기에 달력을 만들거나 캘린더 컴포넌트를 추가할 수 있습니다. */}\r\n                        <Calendar />\r\n                    </div>\r\n                    <div className=\"buttons-container\">\r\n                        <button className=\"reserve-button\" onClick={handleReserveClick}>회의 예약</button>\r\n                        <button className=\"edit-button\" onClick={handleEditClick}>수정하기</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <hr className=\"divider\" />\r\n            {/* 나의 회의 기록 섹션 */}\r\n            <div className=\"meeting-record-section\">\r\n                <h3>나의 회의 기록 보기</h3>\r\n                <ul className=\"meeting-list\">\r\n                    {meetings.map((meeting) => (\r\n                        <li key={meeting.id} className=\"meeting-item\">\r\n                            <strong>{meeting.title}</strong> {meeting.time}\r\n                            <button\r\n                                className=\"share-button\"\r\n                                onClick={() => onClickButtonMeetingSum(meeting.id)}>공유편집\r\n                            </button>\r\n                            <button\r\n                                className=\"summary-button\"\r\n                                onClick={() => onClickButtonAISummary(meeting.id)}>AI 요약\r\n                            </button>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MyConference;\r\n","C:\\Users\\PC\\OneDrive\\바탕 화면\\GVC-web\\gvc\\client\\src\\pages\\MyPageCorrection.js",["83","84","85"],[],"import './MyPageCorrection.css';\r\n\r\nimport { MyPage } from './MyPage';\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nimport { Routes, Route } from 'react-router-dom';\r\nimport { useNavigate } from \"react-router-dom\"; \r\n\r\n\r\nexport function MyPageCorrection() {\r\n  const navigate = useNavigate();\r\n\r\n  const handleGoToMyPage = () => {\r\n    navigate(\"/myPage\");\r\n  }\r\n\r\n \r\n  const handleEditClick = () => {\r\n    // 수정하기 버튼 클릭 시 동작\r\n    console.log('수정하기 버튼 클릭');\r\n  };\r\n\r\n  return (\r\n    <div className=\"MyPageCorrection\">\r\n      <h1>마이페이지</h1>\r\n        <div className=\"MyInfo\">\r\n            <h3>나의 정보</h3>\r\n            <div className=\"buttons-container\">\r\n              <button className=\"editbutton\" onClick={() => handleEditClick()}>확정하기</button>\r\n            </div>  \r\n            <hr className=\"divider\" />\r\n            <label>아이디 &nbsp;</label>\r\n            <input type=\"email\" autofocus required />\r\n            <br/>\r\n            <label>비밀번호 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n            </label>\r\n            <input type=\"text\" autofocus required/>\r\n            <br/>\r\n            <label>이름(실명) &nbsp;</label>\r\n            <input type=\"text\" autofocus required/>\r\n            <br/>\r\n            <label>이메일  &nbsp;&nbsp;&nbsp;&nbsp;</label>\r\n            <input type=\"text\" autofocus required/>\r\n            <br/>\r\n            <label>휴대전화  &nbsp;&nbsp;&nbsp;&nbsp;</label>\r\n            <input type=\"text\" autofocus required/>\r\n            <br/>\r\n        </div>    \r\n      <hr className=\"divider\" />\r\n      <h3>수신설정</h3>\r\n\r\n      <Routes unmountOnNavigate>\r\n            <Route path=\"/myPage\" element={<MyPage />} />\r\n      </Routes>\r\n        \r\n      </div>\r\n  );\r\n}\r\n\r\nexport default MyPageCorrection;","C:\\Users\\PC\\OneDrive\\바탕 화면\\GVC-web\\gvc\\client\\src\\pages\\LoginPage.js",["86"],[],"import React, { useEffect, useState } from 'react';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport styled from 'styled-components';\r\n\r\nconst Page = styled.div`\r\n    position: relative;\r\n    top: 0;\r\n    bottom: 0;\r\n    width: 100%;\r\n    max-width: 550px;\r\n    padding: 0 20px;\r\n    left: 50%;\r\n    transform: translate(-49%, 0);\r\n    overflow: hidden;\r\n    flex-direction: column;\r\n`;\r\n\r\nconst Title = styled.div`\r\n    margin: 60px auto;\r\n    text-align: center;\r\n    font-size: 40px;\r\n    font-weight: 700;\r\n    font-stretch: expanded;\r\n    color: black;\r\n`;\r\n\r\nconst ContentWrap = styled.div`\r\n    margin-top: 20px;\r\n    flex: 1;\r\n`;\r\n\r\nconst InputTitle = styled.div`\r\n    margin-top: 10px;\r\n    font-size: 15px;\r\n    font-weight: 600;\r\n    color: #0e0e0e;\r\n`;\r\n\r\nconst InputWrap = styled.div`\r\n    border-radius: 10px;\r\n    padding: 16px;\r\n    background-color: #ADC5FA;\r\n    margin-top: 10px;\r\n\r\n    &:focus-within {\r\n        border: 2px solid #3c59ea;\r\n    }\r\n`;\r\n\r\nconst Input = styled.input`\r\n    width: 100%;\r\n    outline: none;\r\n    border: none;\r\n    height: 17px;\r\n    font-size: 16px;\r\n    font-weight: 400;\r\n    background-color: #3c59ea02;\r\n\r\n    &::placeholder {\r\n        color: #6E6E6E;\r\n        font-weight: 400;\r\n    }\r\n`;\r\n\r\nconst ErrorMessageWrap = styled.div`\r\n    margin-top: 8px;\r\n    color: #ed1a3a;\r\n    font-size: 14px;\r\n    font-weight: 400;\r\n`;\r\n\r\nconst ButtonWrap = styled.div`\r\n    width: 100%;\r\n    margin-top: 10px;\r\n    text-align: center;\r\n`;\r\n\r\nconst BottomButton = styled.button`\r\n    width: 100%;\r\n    height: 58px;\r\n    border: none;\r\n    border-radius: 20px;\r\n    font-weight: 700;\r\n    font-size: 18px;\r\n    background-color: #2969F3;\r\n    color: white;\r\n    margin-top: 30px;\r\n    cursor: pointer;\r\n`;\r\n\r\nconst BottomButton1 = styled.button`\r\n    width: 100%;\r\n    height: 58px;\r\n    border: none;\r\n    border-radius: 20px;\r\n    font-weight: 700;\r\n    font-size: 18px;\r\n    background-color: #ADC5FA;\r\n    color: white;\r\n    margin-top: 10px;\r\n    cursor: pointer;\r\n`;\r\n\r\nconst Sub = styled.div`\r\n    text-align: center;\r\n    font-size: 15px;\r\n    font-weight: 700;\r\n    color: #030000;\r\n    margin-top: 15px;\r\n    cursor: pointer;\r\n`;\r\n\r\nconst Sub1 = styled.div`\r\n    text-align: center;\r\n    font-size: 22px;\r\n    font-weight: 700;\r\n    color: #646464;\r\n    margin-top: 30px;\r\n`;\r\n\r\nfunction LoginPage() {\r\n    const navigate = useNavigate();\r\n\r\n    const [uid, setUid] = useState('');\r\n    const [pw, setPw] = useState('');\r\n\r\n    const [uidValid, setUidValid] = useState(false);\r\n    const [pwValid, setPwValid] = useState(false);\r\n    const [notAllow, setNotAllow] = useState(true);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n\r\n    useEffect(() => {\r\n        if (uidValid && pwValid) {\r\n            setNotAllow(false);\r\n        } else {\r\n            setNotAllow(true);\r\n        }\r\n    }, [uidValid, pwValid]);\r\n\r\n    const handleUid = (e) => {\r\n        setUid(e.target.value);\r\n        const regex = /^[a-zA-Z0-9]{4,}$/;\r\n        setUidValid(regex.test(e.target.value));\r\n    };\r\n\r\n    const handlePw = (e) => {\r\n        setPw(e.target.value);\r\n        const regex = /^(?=.*[a-zA-Z])(?=.*[0-9]).{6,}$/;\r\n        setPwValid(regex.test(e.target.value));\r\n    };\r\n\r\n    const onClickConfirmButton = async () => {\r\n        try {\r\n            const response = await axios.post('http://localhost:5000/api/auth/login', { uid, upassword: pw });\r\n            if (response.status === 200) {\r\n                const token = response.data.token; // 서버에서 반환된 토큰\r\n                localStorage.setItem('token', token); // localStorage에 토큰 저장\r\n                navigate('/'); // HomePage로 이동\r\n            }\r\n        } catch (error) {\r\n            if (error.response && error.response.data) {\r\n                setErrorMessage(error.response.data.message); \r\n            } else {\r\n                setErrorMessage(\"서버 오류가 발생했습니다. 잠시 후 다시 시도해주세요.\");\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleNavigateToLoginSearch = () => {\r\n        navigate('/loginSearchPage');\r\n    };\r\n\r\n    const handleNavigateToSignUp = () => {\r\n        navigate('/signUp');\r\n    };\r\n\r\n    return (\r\n        <Page>\r\n            <Title>로그인</Title>\r\n            <ContentWrap>\r\n                <InputTitle>아이디</InputTitle>\r\n                <InputWrap>\r\n                    <Input \r\n                        type='text'\r\n                        placeholder='아이디를 입력해주세요'\r\n                        value={uid} \r\n                        onChange={handleUid}/>\r\n                </InputWrap>\r\n\r\n                <InputTitle style={{ marginTop: \"28px\" }}>비밀번호</InputTitle>\r\n                <InputWrap>\r\n                    <Input \r\n                        type='password'\r\n                        placeholder='비밀번호를 입력해주세요'\r\n                        value={pw} \r\n                        onChange={handlePw}/>\r\n                </InputWrap>\r\n                <ErrorMessageWrap>\r\n                    {!pwValid && pw.length > 0 && (\r\n                        <div>올바른 비밀번호를 입력해주세요 </div>\r\n                    )}\r\n                </ErrorMessageWrap>\r\n            </ContentWrap>\r\n\r\n            <ButtonWrap>\r\n                <BottomButton \r\n                    onClick={onClickConfirmButton}\r\n                    disabled={notAllow}>\r\n                    로그인\r\n                </BottomButton>\r\n            </ButtonWrap>\r\n            <Sub onClick={handleNavigateToLoginSearch}>아이디/비밀번호 찾기</Sub>\r\n            <Sub1>아직 회원이 아니신가요?</Sub1>\r\n            <ButtonWrap>\r\n                <BottomButton1 onClick={handleNavigateToSignUp}>\r\n                    회원가입\r\n                </BottomButton1>\r\n            </ButtonWrap>\r\n        </Page>\r\n    );\r\n}\r\n\r\nexport default LoginPage;\r\n","C:\\Users\\PC\\OneDrive\\바탕 화면\\GVC-web\\gvc\\client\\src\\pages\\MyPage.js",["87"],[],"import React, { useState, useEffect } from 'react';\r\nimport { Routes, Route } from 'react-router-dom';\r\nimport { useNavigate } from \"react-router-dom\"; \r\n\r\nimport './MyPage.css';\r\nimport { MyPageCorrection } from './MyPageCorrection';\r\n\r\nexport function MyPage() {\r\n  const navigate = useNavigate();\r\n\r\n  const [emailConsent, setEmailConsent] = useState(false);\r\n\r\n  const handleEditClick = () => {\r\n    // 수정하기 버튼 클릭 시 동작\r\n    navigate(\"/myPageCorrection\")\r\n  };\r\n\r\n  const handleCheckboxChange = () => {\r\n    setEmailConsent(!emailConsent);\r\n  };\r\n\r\n  return (\r\n    <div className=\"Mypage\">\r\n      <h1>마이페이지</h1>\r\n        <div className=\"MyInfo\">\r\n            <h3>나의 정보</h3>\r\n            <div className=\"buttons-container\">\r\n              <button className=\"editbutton\" onClick={() => handleEditClick()}>수정하기</button>\r\n            </div>  \r\n            <hr className=\"divider\" />\r\n            <div>\r\n              <label>아이디&nbsp;</label>\r\n              <input type=\"email\" required defaultValue=\"user123\" disabled />\r\n            </div>\r\n            <br />\r\n            <div>\r\n              <label>비밀번호&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</label>\r\n              <input type=\"password\" required defaultValue=\"********\" disabled />\r\n            </div>\r\n            <br />\r\n            <div>\r\n              <label>이름(실명)&nbsp;</label>\r\n              <input type=\"text\" required defaultValue=\"홍길동\" disabled />\r\n            </div>\r\n            <br />\r\n            <div>\r\n              <label>이메일&nbsp;&nbsp;&nbsp;&nbsp;</label>\r\n              <input type=\"email\" required defaultValue=\"honggildong@example.com\" disabled />\r\n            </div>\r\n            <br />\r\n            <div>\r\n              <label>휴대전화&nbsp;&nbsp;&nbsp;&nbsp;</label>\r\n              <input type=\"tel\" required defaultValue=\"010-1234-5678\" disabled />\r\n            </div>\r\n            <br />\r\n        </div>    \r\n      <hr className=\"divider\" />\r\n      <h3>수신설정</h3>\r\n      <div>\r\n        <label>\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={emailConsent}\r\n            onChange={handleCheckboxChange}\r\n          />\r\n          이메일 수신 동의\r\n        </label>\r\n      </div>\r\n\r\n      <Routes unmountOnNavigate>\r\n        <Route path=\"/myPageCorrection\" element={<MyPageCorrection />} />\r\n      </Routes>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MyPage;","C:\\Users\\PC\\OneDrive\\바탕 화면\\GVC-web\\gvc\\client\\src\\pages\\AISummary.js",[],[],"C:\\Users\\PC\\OneDrive\\바탕 화면\\GVC-web\\gvc\\client\\src\\pages\\Header.jsx",["88","89"],[],"C:\\Users\\PC\\OneDrive\\바탕 화면\\GVC-web\\gvc\\client\\src\\pages\\LoginSearch\\LoginSearchPage.js",["90","91","92"],[],"import React, { useState } from 'react';\r\nimport './LoginSearchPage.css';\r\n\r\n\r\nconst LoginSearchPage = () => {\r\n    //전체오류 메세지.\r\n    const [formError, setFormError] = useState(false); // 폼 오류 상태\r\n\r\n    // 아이디를 찾기 위한 변수 선언\r\n    const [userDetails_ID, setUserDetailsID] = useState({\r\n        username: '', //유저 이름\r\n        connectionTool: '', //연결방식\r\n        phoneNumber: '', //핸드폰 번호\r\n        email: '', //이메일\r\n\r\n    });  \r\n    //비밀번호를 찾기 위한 변수 선언\r\n    const [userDetails_PW, setUserDetailsPW] = useState({\r\n        username: '', //유저 이름\r\n        connectionTool: '', //연결방식\r\n        phoneNumber: '', //핸드폰 번호\r\n        email: '', //이메일\r\n        userID: '' //유저 아이디\r\n\r\n    });\r\n\r\n    const handleInputChangeID = (e) => {\r\n        const { name, value } = e.target;\r\n        setUserDetailsID({\r\n            ...userDetails_ID,\r\n            [name]: value\r\n        });\r\n\r\n        \r\n    };\r\n\r\n    const handleInputChangePW = (e) => {\r\n        const { name, value } = e.target;\r\n        setUserDetailsPW(prev => ({ ...prev, [name]: value }));\r\n    };\r\n\r\n\r\n    //아이디 찾기를 했을 때 작성하지 않은 것이 있는지 확인하는 함수\r\n    const chenckEmtySearchID = () => {\r\n        //인증 수단으로 휴대전화 번호를 선택한 경우\r\n        if(userDetails_ID.connectionTool===\"connect_phone\"){\r\n            if (!userDetails_ID.username) {\r\n                console.log('Form submitted:', userDetails_ID);\r\n                alert('아이디를 입력하지 않으셨습니다. ' + userDetails_ID.username);\r\n                return false;\r\n            }\r\n            else if(!userDetails_ID.phoneNumber){\r\n                alert('휴대전화를 입력하지 않으셨습니다.');\r\n                return false;\r\n            }\r\n            else return true\r\n        }\r\n        //인증 수단으로 이메일을 선택한 경우\r\n        else if(userDetails_ID.connectionTool===\"connect_mail\"){\r\n            if (!userDetails_ID.username || !userDetails_ID.email) {\r\n                return false;\r\n            }\r\n            else return true\r\n        }\r\n        \r\n    };\r\n    //비밀번호 찾기를 했을 때 작성하지 않은것이 있는지 확인한다\r\n    const chenckEmtySearchPW = () => {\r\n        //인증 수단으로 휴대전화 번호를 선택한 경우\r\n        if(userDetails_PW.connectionTool===\"connect_phone\"){\r\n            if (!userDetails_PW.username || !userDetails_PW.phoneNumber || !userDetails_PW.userID) {\r\n                return false;\r\n            }\r\n            else return true\r\n        }\r\n        //인증 수단으로 이메일을 선택한 경우\r\n        else if(userDetails_PW.connectionTool===\"connect_mail\"){\r\n            if (!userDetails_PW.username || !userDetails_PW.email || !userDetails_PW.userID) {\r\n                return false;\r\n            }\r\n            else return true\r\n        }\r\n\r\n    };\r\n    //형식이 맞는지, 데이터 베이스에 있는 건지 확인한다.\r\n    const chenckValidateEmail = (email) => {\r\n            // 이메일 주소의 유효성을 검사하는 정규 표현식\r\n            const emailPattern = /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i;\r\n            var isRihgtForm=emailPattern.test(email);\r\n            if(isRihgtForm===false){\r\n                return false;\r\n            } \r\n            // 정규 표현식을 사용하여 이메일 주소가 유효한 형식인지 확인\r\n\r\n        // 이메일 형식이 맞는지 확인한다\r\n        // 아직 데이터베이스가 없으므로 비워놓음\r\n        return true;\r\n    }\r\n    // 유효한 전화번호인지 확인한다.\r\n    \r\n    const chenckValidateTelephone = (phoneNumber) => {\r\n        // 전화번호 형식이 맞는지 확인한다\r\n        \r\n        const phoneNumberPattern = /^[0-9]{3}[0-9]{3,4}[0-9]{4}$/; // 휴대전화 번호는 숫자로 이루어진 문자열이어야 합니다.\r\n        var isRihgtForm=phoneNumberPattern.test(phoneNumber) // 정규 표현식을 사용하여 휴대전화 번호가 유효한 형식인지 확인합니다.\r\n        if(isRihgtForm===false){\r\n            return false;\r\n        } \r\n\r\n        // 아직 데이터베이스가 없으므로 비워놓음\r\n        return true;\r\n    }\r\n    //유효한 아이디인지 확인한다. \r\n    \r\n    const chenckValidateID = () => {\r\n        //아직 데이터베이스가 없으 므로 비워놓음\r\n        return true;\r\n    }\r\n    //유효한 이름인인지 확인한다. \r\n    const chenckValidateName = () => {\r\n        // 아직 데이터 베이스가 없으므로 비워놓음.\r\n        return true;\r\n    }\r\n    // 빠진 것이 없고, 모든 데이터를 유효하게 입력했는지 확인한다. \r\n    //chenckValidateEmail chenckValidateTelephone chenckValidateID chenckValidateName\r\n    //phoneNumber email\r\n    const validateForm_ID = () => {\r\n        if(userDetails_ID.connectionTool==='connect_phone'){\r\n            if (!chenckValidateName(userDetails_ID.username) || !chenckValidateTelephone(userDetails_ID.phoneNumber)) {\r\n                return false;\r\n            }\r\n        }\r\n        else{\r\n            if (!chenckValidateName(userDetails_ID.username) || !chenckValidateEmail(userDetails_ID.email)) {\r\n                return false;\r\n            }\r\n\r\n        }\r\n        return true;\r\n    };\r\n\r\n    const validateForm_PW = () => {\r\n        if(userDetails_PW.connectionTool==='connect_phone'){\r\n            if (!chenckValidateName(userDetails_ID.username) || !chenckValidateID()|| !chenckValidateTelephone(userDetails_ID.phoneNumber)) {\r\n                return false;\r\n            }\r\n        }\r\n        else{\r\n            if (!chenckValidateName(userDetails_ID.username) ||!chenckValidateID()|| !chenckValidateEmail(userDetails_ID.email)) {\r\n                return false;\r\n            }\r\n\r\n        }\r\n        return true;\r\n    };\r\n// 폼의 유효성을 검사\r\n    const handleSubmit_ID = (e) => {\r\n        e.preventDefault();\r\n        \r\n        // 폼 제출 후, 홈페이지로 \r\n        //\r\n        if (!chenckEmtySearchID()) {\r\n            setFormError(true);\r\n            return false;\r\n        } else if(!validateForm_ID()){ \r\n            alert('유효하지 않은 입력 방식입니다.');\r\n            setFormError(true);\r\n            return false;\r\n        }\r\n        alert('아이디 찾기에 성공하셨습니다.');\r\n        return true;\r\n    };\r\n\r\n    const handleSubmit_PW = (e) => {\r\n        e.preventDefault();\r\n        // 폼의 유효성을 검사\r\n        // 폼 제출 후, 홈페이지로 \r\n        if (validateForm_PW()&&chenckEmtySearchPW) {\r\n            setFormError(false);\r\n            window.location.href = '/home'; // 홈페이지 URL로 변경\r\n        } else { // 오류 상태를 업데이트\r\n            setFormError(true);\r\n        }\r\n    };\r\n\r\n\r\n    //버튼을 누른 경우 폼 검사한다\r\n    const click_button = (e) => {\r\n    };\r\n     //ID 찾기에서 체크박스를 선택한 경우 표시한다.\r\n     const chooseConnetToolID = (e) => {\r\n        setUserDetailsID({\r\n            ...userDetails_ID, // 기존 상태를 복사\r\n            connectionTool: e.target.value // 새로운 값을 설정\r\n        });\r\n\r\n    };\r\n    //비밀번호에서 체크박스를 선택한 경우 표시한다.\r\n    const chooseConnetToolIPW = (e) => {\r\n        setUserDetailsPW({\r\n            ...userDetails_PW, // 기존 상태를 복사\r\n            connectionTool: e.target.value // 새로운 값을 설정\r\n        });\r\n\r\n\r\n    };\r\n\r\n    //데이터 베이스에 연결해서 맞는 데이터인지 확인하는 함수\r\n    //아직 작성은 하지 않음\r\n    const checkDataRight = () => {\r\n            return true;\r\n    };\r\n\r\n        return (<div className=\"specific-element\">\r\n                <div className=\"search-containers\">\r\n                    <div className=\"search-container\">\r\n                        <div className=\"form-title\">아이디/비밀번호 찾기</div>   \r\n                    </div>\r\n                         \r\n                        \r\n                    <div className=\"search-container\"></div>\r\n                    </div> \r\n    <div className=\"search-containers\">\r\n                    \r\n                    <div className=\"search-container\">\r\n                    <div className=\"form-title-container\">아이디 찾기</div>\r\n                        <form className=\"search-form\" onSubmit={handleSubmit_ID}>\r\n                            <div className=\"input-group\">\r\n                                <label>이름</label>\r\n                                <input type=\"text\" name=\"username\" placeholder=\"이름\" onChange={handleInputChangeID}/>\r\n                            </div>\r\n                            <div className=\"input_connect_radio\">\r\n                                <label>연결방식</label>\r\n                                <input type='radio' name='connetTool' value='connect_phone'  onChange={chooseConnetToolID}/>휴대폰         \r\n                                <input type='radio' name='connetTool' value='connect_mail'  onChange={chooseConnetToolID}/>이메일\r\n                            </div>\r\n\r\n                            {userDetails_ID.connectionTool==='connect_phone' &&                             \r\n                                                        <div className=\"input-group\">\r\n                                                        <label>전화번호</label>\r\n                                                        <input type=\"tel\" name=\"phoneNumber\" pattern=\"[0-9]{2,3}[0-9]{3,4}[0-9]{4}\" placeholder=\"전화번호를 입력해 주세요\" onChange={handleInputChangeID}/>\r\n                                                    </div>\r\n\r\n                            }\r\n\r\n                            {userDetails_ID.connectionTool==='connect_mail' &&                             \r\n                            <div className=\"input-group\">\r\n                            <label>이메일 </label>\r\n                            <input type=\"email\" name=\"email\" placeholder=\"이메일을 작성해 주세요\" onChange={handleInputChangeID}/>\r\n                            \r\n                        </div>\r\n                        }\r\n\r\n\r\n                            <div className=\"submit_button\">\r\n                                <button type=\"submit\">아이디 찾기</button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n            \r\n            \r\n                    <div className=\"search-container\">\r\n                    <div className=\"form-title-container\">비밀번호 찾기</div>\r\n                        <form className=\"search-form\" onSubmit={handleSubmit_PW}>\r\n                            \r\n                            <div className=\"input-group\">\r\n                                <label>이름</label>\r\n                                <input type=\"text\" name=\"username\" placeholder=\"이름\" onChange={handleInputChangePW}/>\r\n                            </div>\r\n                            <div className=\"input-group\">\r\n                                <label>아이디</label>\r\n                                <input type=\"text\" name=\"userID\" placeholder=\"아이디\" onChange={handleInputChangePW}/>\r\n                            </div>\r\n                            <div className=\"input_connect_radio\">\r\n                                <label>연결방식</label>\r\n                                <input type='radio' name='connetToolPW' value='connect_phone'  onChange={chooseConnetToolIPW} />휴대폰\r\n                                <input type='radio' name='connetToolPW' value='connect_mail'  onChange={chooseConnetToolIPW} />이메일\r\n                            </div>\r\n            \r\n                            {userDetails_PW.connectionTool==='connect_phone' &&                             \r\n                                                        <div className=\"input-group\">\r\n                                                        <label>전화번호</label>\r\n                                                        <input type=\"tel\" name=\"phoneNumber\" pattern=\"[0-9]{2,3}[0-9]{3,4}[0-9]{4}\" placeholder=\"전화번호를 입력해 주세요\" onChange={handleInputChangePW}/>\r\n                                                    </div>\r\n\r\n                            }\r\n\r\n                            {userDetails_PW.connectionTool==='connect_mail' &&                             \r\n                            <div className=\"input-group\">\r\n                            <label>이메일 </label>\r\n                            <input type=\"email\" name=\"email\" placeholder=\"이메일을 작성해 주세요\" onChange={handleInputChangePW}/>\r\n                            \r\n                        </div>\r\n                        }   \r\n\r\n                            <div className=\"submit_button\">\r\n                                <button type=\"submit\">비밀번호 찾기</button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n            \r\n                </div>\r\n        </div>\r\n\r\n\r\n);\r\n}\r\n\r\nexport default LoginSearchPage;\r\n","C:\\Users\\PC\\OneDrive\\바탕 화면\\GVC-web\\gvc\\client\\src\\pages\\GlobalStyle.js",[],[],"C:\\Users\\PC\\OneDrive\\바탕 화면\\GVC-web\\gvc\\client\\src\\pages\\axiosInstance.js",[],[],{"ruleId":"93","severity":1,"message":"94","line":162,"column":27,"nodeType":"95","messageId":"96","endLine":162,"endColumn":35},{"ruleId":"93","severity":1,"message":"94","line":178,"column":23,"nodeType":"95","messageId":"96","endLine":178,"endColumn":31},{"ruleId":"93","severity":1,"message":"94","line":194,"column":27,"nodeType":"95","messageId":"96","endLine":194,"endColumn":35},{"ruleId":"93","severity":1,"message":"97","line":15,"column":22,"nodeType":"95","messageId":"96","endLine":15,"endColumn":33},{"ruleId":"93","severity":1,"message":"98","line":4,"column":17,"nodeType":"95","messageId":"96","endLine":4,"endColumn":25},{"ruleId":"93","severity":1,"message":"99","line":4,"column":27,"nodeType":"95","messageId":"96","endLine":4,"endColumn":36},{"ruleId":"93","severity":1,"message":"100","line":13,"column":9,"nodeType":"95","messageId":"96","endLine":13,"endColumn":25},{"ruleId":"93","severity":1,"message":"101","line":131,"column":12,"nodeType":"95","messageId":"96","endLine":131,"endColumn":24},{"ruleId":"93","severity":1,"message":"99","line":1,"column":27,"nodeType":"95","messageId":"96","endLine":1,"endColumn":36},{"ruleId":"93","severity":1,"message":"102","line":8,"column":12,"nodeType":"95","messageId":"96","endLine":8,"endColumn":22},{"ruleId":"93","severity":1,"message":"103","line":35,"column":11,"nodeType":"95","messageId":"96","endLine":35,"endColumn":24},{"ruleId":"93","severity":1,"message":"104","line":7,"column":12,"nodeType":"95","messageId":"96","endLine":7,"endColumn":21},{"ruleId":"93","severity":1,"message":"105","line":188,"column":11,"nodeType":"95","messageId":"96","endLine":188,"endColumn":23},{"ruleId":"93","severity":1,"message":"106","line":210,"column":11,"nodeType":"95","messageId":"96","endLine":210,"endColumn":25},"no-unused-vars","'response' is assigned a value but never used.","Identifier","unusedVar","'setMeetings' is assigned a value but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'handleGoToMyPage' is assigned a value but never used.","'errorMessage' is assigned a value but never used.","'isLoggedIn' is assigned a value but never used.","'onClickLogout' is assigned a value but never used.","'formError' is assigned a value but never used.","'click_button' is assigned a value but never used.","'checkDataRight' is assigned a value but never used."]